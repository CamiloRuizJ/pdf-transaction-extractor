name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: [ 'frontend/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'frontend/**' ]

env:
  NODE_VERSION: '20'
  CACHE_KEY_PREFIX: 'frontend-v1'

jobs:
  # Install dependencies and cache
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "cache-key=${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('frontend/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ steps.cache-keys.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline

  # Linting and code quality
  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint -- --format=json --output-file=eslint-report.json
        continue-on-error: true

      - name: Upload lint results
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: frontend/eslint-report.json

  # Type checking
  typecheck:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run TypeScript type checking
        run: |
          cd frontend
          npx tsc --noEmit --pretty

  # Unit and integration tests
  test-unit:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          cd frontend
          npm run test -- --coverage --reporter=json --outputFile=test-results-unit.json
        env:
          CI: true

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          cd frontend
          npm run test -- src/test/integration --coverage --reporter=json --outputFile=test-results-integration.json
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            frontend/test-results-${{ matrix.test-type }}.json
            frontend/coverage/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./frontend/coverage/
          flags: frontend-${{ matrix.test-type }}
          name: frontend-${{ matrix.test-type }}-coverage

  # Accessibility tests
  test-accessibility:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run accessibility tests
        run: |
          cd frontend
          npm run test:accessibility -- --reporter=json --outputFile=accessibility-results.json
        env:
          CI: true

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-results
          path: frontend/accessibility-results.json

  # End-to-end tests
  test-e2e:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps ${{ matrix.browser }}

      - name: Start development server
        run: |
          cd frontend
          npm run dev &
          npx wait-on http://localhost:5173 --timeout 60000

      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e -- --project=${{ matrix.browser }} --reporter=json
        env:
          CI: true

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            frontend/test-results/
            frontend/playwright-report/

  # Performance tests
  test-performance:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps chromium

      - name: Start development server
        run: |
          cd frontend
          npm run dev &
          npx wait-on http://localhost:5173 --timeout 60000

      - name: Run performance tests
        run: |
          cd frontend
          npx playwright test src/test/performance --project=chromium --reporter=json
        env:
          CI: true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: frontend/test-results/

  # Visual regression tests
  test-visual:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps chromium

      - name: Start development server
        run: |
          cd frontend
          npm run dev &
          npx wait-on http://localhost:5173 --timeout 60000

      - name: Run visual regression tests
        run: |
          cd frontend
          npx playwright test -c src/test/visual/visual-regression.config.ts --project=chromium-desktop
        env:
          CI: true

      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-regression-results
          path: |
            frontend/test-results/visual/
            frontend/src/test/visual/test-results/

  # Build application
  build:
    runs-on: ubuntu-latest
    needs: [setup, lint, typecheck]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Build application
        run: |
          cd frontend
          npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: frontend/dist/

      - name: Analyze bundle size
        run: |
          cd frontend
          npx bundlesize

  # Security audit
  security-audit:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run security audit
        run: |
          cd frontend
          npm audit --audit-level=high --json > security-audit.json
        continue-on-error: true

      - name: Upload security audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit
          path: frontend/security-audit.json

  # Quality gate - all tests must pass
  quality-gate:
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test-unit, test-accessibility, test-e2e, test-performance, build, security-audit]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint status: ${{ needs.lint.result }}"
          echo "Typecheck status: ${{ needs.typecheck.result }}"
          echo "Unit tests status: ${{ needs.test-unit.result }}"
          echo "Accessibility tests status: ${{ needs.test-accessibility.result }}"
          echo "E2E tests status: ${{ needs.test-e2e.result }}"
          echo "Performance tests status: ${{ needs.test-performance.result }}"
          echo "Build status: ${{ needs.build.result }}"
          echo "Security audit status: ${{ needs.security-audit.result }}"
          
          if [[ "${{ needs.lint.result }}" != "success" || 
                "${{ needs.typecheck.result }}" != "success" || 
                "${{ needs.test-unit.result }}" != "success" || 
                "${{ needs.test-accessibility.result }}" != "success" || 
                "${{ needs.test-e2e.result }}" != "success" || 
                "${{ needs.test-performance.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" ]]; then
            echo "Quality gate failed!"
            exit 1
          fi
          
          echo "Quality gate passed!"

      - name: Post quality gate results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Quality Gate Results')
            );
            
            const status = '${{ needs.quality-gate.result }}' === 'success' ? '✅ PASSED' : '❌ FAILED';
            const body = `
            ## Quality Gate Results ${status}
            
            | Test Suite | Status |
            |------------|--------|
            | Linting | ${{ needs.lint.result == 'success' && '✅' || '❌' }} |
            | Type Checking | ${{ needs.typecheck.result == 'success' && '✅' || '❌' }} |
            | Unit Tests | ${{ needs.test-unit.result == 'success' && '✅' || '❌' }} |
            | Accessibility Tests | ${{ needs.test-accessibility.result == 'success' && '✅' || '❌' }} |
            | E2E Tests | ${{ needs.test-e2e.result == 'success' && '✅' || '❌' }} |
            | Performance Tests | ${{ needs.test-performance.result == 'success' && '✅' || '❌' }} |
            | Build | ${{ needs.build.result == 'success' && '✅' || '❌' }} |
            | Security Audit | ${{ needs.security-audit.result == 'success' && '✅' || '⚠️' }} |
            
            View detailed results in the [Actions tab](${context.payload.repository.html_url}/actions/runs/${context.runId}).
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Deploy to staging (only on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [quality-gate, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./dist

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # Example: aws s3 sync ./dist s3://staging-bucket --delete

      - name: Run smoke tests on staging
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test commands here

  # Deploy to production (only on releases)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [quality-gate, build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment: production
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./dist

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here

      - name: Run smoke tests on production
        run: |
          echo "Running smoke tests on production..."
          # Add production smoke test commands here

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Frontend deployment successful.
            
            Changes in this release:
            - See commit history for details
          draft: false
          prerelease: false